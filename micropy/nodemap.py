from .primitives import raises

def mknodemap(lang_):
    # type: (lang) -> None
    "Does mknodemap"
    import _ast
    lang = type('pseudomodule',(object,),lang_)()

    noop = raises(KeyError)
    lang.fnof = lambda name: lang_.get(f'rep_{name}', noop)

    return {
        _ast.Add: noop,
        _ast.And: noop,
        _ast.AnnAssign: noop,
        _ast.Assert: noop,
        _ast.Assign: noop,
        _ast.AsyncFor: noop,
        _ast.AsyncFunctionDef: noop,
        _ast.AsyncWith: noop,
        _ast.Attribute: noop,
        _ast.AugAssign: noop,
        _ast.AugLoad: noop,
        _ast.AugStore: noop,
        _ast.Await: noop,
        _ast.BinOp: noop,
        _ast.BitAnd: noop,
        _ast.BitOr: noop,
        _ast.BitXor: noop,
        _ast.BoolOp: noop,
        _ast.Break: noop,
        _ast.Bytes: noop,
        _ast.Call: noop,
        _ast.ClassDef: noop,
        _ast.Compare: noop,
        _ast.Constant: noop,
        _ast.Continue: noop,
        _ast.Del: noop,
        _ast.Delete: noop,
        _ast.Dict: noop,
        _ast.DictComp: noop,
        _ast.Div: noop,
        _ast.Ellipsis: noop,
        _ast.Eq: noop,
        _ast.ExceptHandler: noop,
        _ast.Expr: noop,
        _ast.Expression: noop,
        _ast.ExtSlice: noop,
        _ast.FloorDiv: noop,
        _ast.For: noop,
        _ast.FormattedValue: noop,
        _ast.FunctionDef: noop,
        _ast.GeneratorExp: noop,
        _ast.Global: noop,
        _ast.Gt: noop,
        _ast.GtE: noop,
        _ast.If: noop,
        _ast.IfExp: noop,
        _ast.Import: noop,
        _ast.ImportFrom: noop,
        _ast.In: noop,
        _ast.Index: noop,
        _ast.Interactive: noop,
        _ast.Invert: noop,
        _ast.Is: noop,
        _ast.IsNot: noop,
        _ast.JoinedStr: noop,
        _ast.LShift: noop,
        _ast.Lambda: noop,
        _ast.List: noop,
        _ast.ListComp: noop,
        _ast.Load: noop,
        _ast.Lt: noop,
        _ast.LtE: noop,
        _ast.MatMult: noop,
        _ast.Mod: noop,
        _ast.Module: noop,
        _ast.Mult: noop,
        _ast.Name: noop,
        _ast.NameConstant: noop,
        _ast.Nonlocal: noop,
        _ast.Not: noop,
        _ast.NotEq: noop,
        _ast.NotIn: noop,
        _ast.Num: noop,
        _ast.Or: noop,
        _ast.Param: noop,
        _ast.Pass: noop,
        _ast.Pow: noop,
        _ast.RShift: noop,
        _ast.Raise: noop,
        _ast.Return: noop,
        _ast.Set: noop,
        _ast.SetComp: noop,
        _ast.Slice: noop,
        _ast.Starred: noop,
        _ast.Store: noop,
        _ast.Str: lang.fnof('Str'),
        _ast.Sub: noop,
        _ast.Subscript: noop,
        _ast.Suite: noop,
        _ast.Try: noop,
        _ast.Tuple: noop,
        _ast.UAdd: noop,
        _ast.USub: noop,
        _ast.UnaryOp: noop,
        _ast.While: noop,
        _ast.With: noop,
        _ast.Yield: noop,
        _ast.YieldFrom: noop,
    }
